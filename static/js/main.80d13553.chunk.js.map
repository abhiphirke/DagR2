{"version":3,"sources":["ApiContents.js","MdContents.js","Navigator.js","App.js","serviceWorker.js","index.js"],"names":["ApiContents","this","props","link","SwaggerUI","domNode","docRef","url","plugins","statePlugins","spec","wrapSelectors","allowTryItOutFor","_this","react_default","a","createElement","className","ref","Component","MdContents","console","log","src","Navigator","state","navigator","activeApp","activeVersion","activeService","componentWillMount","getNavigatorConfig","componentDidUpdate","fetch","then","response","json","setState","appClicked","app","name","onChange","versionClicked","version","serviceClicked","service","jsonUrl","renderVersions","versions","map","j","key","concat","onClick","renderServices","services","k","_this2","_this$state","apps","i","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","alt","src_Navigator_0","includes","src_MdContents_0","src_ApiContents_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80d13553.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport SwaggerUI from 'swagger-ui';\nimport \"../node_modules/swagger-ui/dist/swagger-ui.css\";\nimport \"./ApiContents.css\";\n\nclass ApiContents extends Component {\n  docRef;\n\n  componentDidUpdate() {\n    if (!this.props.link) {\n      return;\n    }\n\n    SwaggerUI({\n      domNode: this.docRef,\n      url: this.props.link,\n      plugins: [\n        () => ({\n          statePlugins: {\n            spec: {\n              wrapSelectors: {\n                allowTryItOutFor: () => () => false\n              }\n            }\n          }\n        })\n      ]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"contents\">\n        <div ref={(ref) => { this.docRef = ref; }} />\n      </div>\n    );\n  }\n}\n\nexport default ApiContents;\n","import React, { Component } from \"react\";\r\n// import SwaggerUI from 'swagger-ui';\r\n// import \"../node_modules/swagger-ui/dist/swagger-ui.css\";\r\nimport \"./MdContents.css\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nclass MdContents extends Component {\r\n  docRef;\r\n\r\n//   componentDidUpdate() {\r\n//     if (!this.props.link) {\r\n//       return;\r\n//     }\r\n\r\n//     // SwaggerUI({\r\n//     //   domNode: this.docRef,\r\n//     //   url: this.props.link,\r\n//     //   plugins: [\r\n//     //     () => ({\r\n//     //       statePlugins: {\r\n//     //         spec: {\r\n//     //           wrapSelectors: {\r\n//     //             allowTryItOutFor: () => () => false\r\n//     //           }\r\n//     //         }\r\n//     //       }\r\n//     //     })\r\n//     //   ]\r\n//     // });\r\n//   }\r\n\r\n  render() {\r\n    const { link } = this.props;\r\n    \r\n    console.log(\"MdContenst = \" + link);\r\n    \r\n    return (\r\n      <div className=\"contents\">\r\n        <iframe src={link}></iframe>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MdContents;\r\n","import React, { Component } from \"react\";\r\nimport \"./Navigator.css\";\r\n\r\nclass Navigator extends Component {\r\n  state = {\r\n    navigator: null,\r\n    activeApp: null,\r\n    activeVersion: null,\r\n    activeService: null\r\n  };\r\n\r\n  componentWillMount = () => {\r\n    this.getNavigatorConfig();\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n  }\r\n\r\n  getNavigatorConfig = () => {\r\n    fetch(\"docs/navigator.json\")\r\n      .then(response => response.json())\r\n      .then(navigator => this.setState({ navigator: navigator }));\r\n  }\r\n\r\n  appClicked = app => (this.state.activeApp !== app.name && this.setState({ activeApp: app.name, activeVersion: null, activeService: null }, () => {\r\n    console.log(\"appClicked - calling onChange\");\r\n    this.props.onChange(\".\\\\DagR2\\\\docs\\\\Overview.md\");\r\n  }));\r\n  versionClicked = version => (this.state.activeVersion !== version.name && this.setState({ activeVersion: version.name }));\r\n  serviceClicked = service => this.state.activeService !== service.name && this.setState({ activeService: service.name }, () => this.props.onChange(service.jsonUrl));\r\n\r\n  render() {\r\n    const { navigator, activeApp } = this.state;\r\n    if (!navigator)\r\n      return null;\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          navigator.apps.map((app, i) =>\r\n            <div key={`a${i}`} className=\"app\">\r\n              <div\r\n                className={\"app-title\" + (app.name === activeApp ? \" selected\" : \"\")}\r\n                onClick={() => this.appClicked(app)}>\r\n                {app.name}\r\n              </div>\r\n              <div className=\"app-children\">\r\n                {activeApp === app.name && this.renderVersions(app)}\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderVersions = app => {\r\n    const { activeVersion } = this.state;\r\n\r\n    return app.versions.map((version, j) => {\r\n      return (\r\n        <div key={`v${j}`} className=\"version\">\r\n          <div\r\n            className={\"version-title\" + (version.name === activeVersion ? \" selected\" : \"\")}\r\n            onClick={() => this.versionClicked(version)}\r\n          >\r\n            {version.name}\r\n          </div>\r\n          <div className=\"version-children\">\r\n            {activeVersion === version.name && this.renderServices(version)}\r\n          </div>\r\n        </div>\r\n      )\r\n    });\r\n  }\r\n\r\n  renderServices = version => {\r\n    const { activeService } = this.state;\r\n\r\n    return version.services.map((service, k) => {\r\n      return (\r\n        <div\r\n          key={`s${k}`}\r\n          className={\"service\" + (service.name === activeService ? \" selected\" : \"\")}\r\n          onClick={() => this.serviceClicked(service)}>\r\n          {service.name}\r\n        </div>);\r\n    })\r\n  }\r\n}\r\n\r\nexport default Navigator;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ApiContents from \"./ApiContents\";\nimport MdContents from \"./MdContents\";\nimport Navigator from \"./Navigator\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      link: \"\"\n    };\n  }\n\n  onChange = jsonUrl => {\n    console.log(\"App.OnChange = \" + jsonUrl);\n    this.setState({ link: jsonUrl });\n  };\n\n  render() {\n    const { link } = this.state;\n    console.log(\"App.Render = \" + link);\n\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <img className=\"logo\" src=\"images/tieto-logo.png\" alt=\"\" />\n          <p className=\"pagetitle\">Credit Solutions and Services</p>\n          <img src=\"images/collections.jpeg\" alt=\"\" />\n        </div>\n        <div className=\"content\">\n          <div className=\"navbar\">\n            <Navigator onChange={this.onChange} />\n          </div>\n          <div className=\"apicontents\">\n            {link.includes(\"overview\") ? <MdContents link={link} /> : <ApiContents link={link} />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}